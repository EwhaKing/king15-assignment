#구조적 프로그래밍
명확하고 논리적인 제어 흐름
작고 관리 가능한 함수들과 절차들로 나뉨
각 함수는 특정한 역할을 수행하도록 설계됨
코드 재사용과 디버깅이 쉬움 but 복잡성 증가 -> 상호작용 관리 힘들 수 있음
(논리적 흐름에 초점을 맞춘) 중소 사이즈의 소프트웨어 프로젝트에 적합

#객체지향 프로그래밍(OOP)
데이터와 행동을 하나의 객체로 묶는 개념을 중심으로 설계됨
class에 기반하여 소프트웨어를 설계하고, 이로부터 실제 객체들을 생성함
(모듈식이고 유지 가능한 코드를 지향하기 때문에) 크고 복잡한 소프트웨어 시스템에 적합

추상화: 단순화된 데이터 속성과 메소드의 집합 노출 / 복잡한 세부 사항 숨기기 가능 -> 사용자와 객체 또는 시스템의 내부 작동 사이의 경계
캡슐화: 해당 데이터에서 작용하는 데이터와 함수를 하나의 클래스로 묶는 과정
상속: 한 클래스가 다른 클래스의 속성과 함수를 물려받는 기능, 기존 코드 재사용 가능 / 새 클래스 쉽게 생성
다형성: 다양한 클래스의 객체들이 같은 방식으로 동작할 수 있는 특성 -> 유연성과 확장성 제공

# .NET형식 시스템 개요
c# 프로그램 속 모든 값은 .NET 내에서 타입으로 표현됨
내장 타입 - int, double, bool 등 C# 기본 제공 형식
커스텀 타입 - 개발자가 직접 만들어 새로운 형식 정의 가능
값 타입 - 데이터를 직접 저장
참조 타입 - 데이터가 저장된 메모리 주소를 참조

#클래스 설계 및 사용

실제 세계 객체 예시: 연필
- 목적: 메모 혹은 그림 -> 행동적 속성
- 구성 요소: 몸체, 촉, 지우개 ->물리적 속성

물리적 속성 -> 데이터(속성) / 행동적 속성 -> 함수

클래스 -> 데이터와 행동(함수)를 캡슐화함 -> 속성을 사용하여 데이터에 접근 + 메서드를 사용하여 동작을 활성화
네임스페이스: .NET 클래스 라이브러리에서 관련 유형을 그룹화하는것에 사용

#클래스 생성자 생성 및 객체 인스턴스화

클래스 생성자 : 클래스 이름과 동일한 이름을 가진 메서드

1. 인스턴스 생성자
	- 객체 생성 시 필드 생성 / 초기화
	- 반환 형식 포함 x
	- 2개 이상의 생성자를 가질 수 있음 -> 보통 서로 다른 매개변수를 가짐
2. 정적 생성자
	- 정적 데이터나 한 번만 실행되는 작업을 초기화
	- 객체가 처음 만들어지기 전이나 정적 요소가 처음 참조되기 전에 자동적으로 호출
	- 접근 제한자 / 매개변수 X
	- 클래스당 static 생성자 -> 하나 존재
	- 상속 / 오버로딩 불가능
	- 직접 호출 불가능

