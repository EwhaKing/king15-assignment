using System;

//사용자 정의 유형 (class, struct, enum, interface 등 사용자 정의 형식 생성)

//struct 키워드를 사용해 사용자 정의 값 유형을 만듦
public struct Coords
{
    public int x, y;

    public Coords(int p1, int p2)
    {
        x = p1;
        y = p2;
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
        //System.Console.WriteLine이 아닌 이유는 가독성 개선을 위해
        //System이 네임스페이스, Console은 해당 네임스페이스의 클래스
        //이런 네임스페이스를 선언함녀 프로젝트에서 클래스/메서드 이름의 범위를 제어하는데에 도움이됨

        byte b = byte.MaxValue;
        Console.WriteLine(b);
        byte num = 0xA; //16진수
        Console.WriteLine(num);
        int a = 5;
        Console.WriteLine(a);
        char c = 'Z';
        Console.WriteLine(c);
        
        //배열 선언
        int[] numbers;
        numbers = new int[5];
        for (int i = 0; i < 5; i++)
        {
            numbers[i] = i;
            Console.WriteLine(numbers[i]);
        }

        Phone my_phone = new Phone(); //정의한 Phone() 클래스를 사용하려면, main()함수 안에서 객체(인스턴스)를 생성해야함
        my_phone.Call("010-1212-3434"); //클래스 내부 속성 설정 가능
        my_phone.Text("010-3456-7980", "Hi :)");

        Person person1 = new Person("Harry" , "Potter");
    }
    
    //클래스는 데이터와 동작을 캡슐화함
    //캡슐화: 데이터와 동작을 단일 단위로 결합하는 프로세스로, 클래스는 속성을 활용해 데이터에 액세스, 메서드를 사용해 동작을 활성화함
    //C#코드의 클래스 정의
    public class Phone
    {
        public string? Brand { get; set; }
        public string? Model { get; set; }
        public int Year { get; set; }

        public void Call(string phone_number)
        {
            Console.WriteLine($"Calling {phone_number}...");
        }

        public void Text(string phone_number, string message)
        {
            Console.WriteLine($"Texting {phone_number}: {message}...");
        }
    } 
    
    //클래스 생성자: 형식과 동일한 이름을 가진 메서드
    // 인스턴스 생성자: 객체가 생성될 때 인스턴스 필드 변수를 생성.초기화하는데 사용
    // 정적 생성자: 정적 데이터를 초기화하거나 한 번만 수행하면 되는 특정 작업을 수행하는데에 사용

    public class Person
    {
        //인스턴스 생성자: 클래스와 동일한 이름을 사용 + 반환 유형 포함X
        public Person()
        {
        
        }

        public Person(string fName, string lName)
        {
            string name = fName + " " + lName;
            Console.WriteLine($"Person created: {name}");
        }
        //클래스는 위에것처럼 두 개 이상의 생성자를 가질 수 있고, 일반적으로 다른 인수를 취함
    }
}


//BankAccount연습
//Classes_M1.cs
using System;

namespace Classes_M1;

public class BankCustomer
{
    public string First_name = "Tim";
    public string Last_name = "Shao";
    public readonly string customer_id;
    //readonly는 선언/생성자에서 값을 할당할 수 있는 필드를 선언하는데에 사용

    private static int s_next_customer_id;
    //고유한 ID 주소
   static BankCustomer() //public 필드는 외부에서 접근가능
    {
        Random rnd = new Random();
        s_next_customer_id = rnd.Next(100000,200000);
    }

    public BankCustomer()
    {
        this.customer_id = s_next_customer_id.ToString("D10");
        //이미 할당된 고객 id num으로 다음꺼를 할당해서 고유하게 만드는?작업?
    }

    
    public BankCustomer(string firstName, string lastName)
    {
        First_name= firstName;
        Last_name= lastName;
        this.customer_id = (s_next_customer_id++).ToString("D10");
    }

    
    public BankCustomer(string first_name, string last_name, string customer_idnum)
    {
        First_name = first_name;
        Last_name = last_name;
        customer_id = customer_idnum;
    }
}

//Program.cs
using Classes_M1;
// 이를 통해 Program.cs 파일 내에서 클래스에 액세스 가능

BankCustomer customer1 = new BankCustomer();
string first_name = "Tim";
string last_name = "Shao";
//string customer_idnum = "10101010";

first_name = "Lisa";
BankCustomer customer2 = new BankCustomer(first_name, last_name);

first_name = "Sandy";
last_name = "Zoeng";
//customer_idnum = "20202020";
BankCustomer customer3 = new BankCustomer(first_name, last_name);


Console.WriteLine($"BankCustomer 1: {customer1.First_name} {customer1.Last_name} {customer1.customer_id}");
Console.WriteLine($"BankCustomer 2: {customer2.First_name} {customer2.Last_name} {customer2.customer_id}");
Console.WriteLine($"BankCustomer 3: {customer3.First_name} {customer3.Last_name} {customer3.customer_id}");

