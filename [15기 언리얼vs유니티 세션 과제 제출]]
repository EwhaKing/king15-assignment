using System;

//사용자 정의 유형 (class, struct, enum, interface 등 사용자 정의 형식 생성)

//struct 키워드를 사용해 사용자 정의 값 유형을 만듦
public struct Coords
{
    public int x, y;

    public Coords(int p1, int p2)
    {
        x = p1;
        y = p2;
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
        //System.Console.WriteLine이 아닌 이유는 가독성 개선을 위해
        //System이 네임스페이스, Console은 해당 네임스페이스의 클래스
        //이런 네임스페이스를 선언함녀 프로젝트에서 클래스/메서드 이름의 범위를 제어하는데에 도움이됨

        byte b = byte.MaxValue;
        Console.WriteLine(b);
        byte num = 0xA; //16진수
        Console.WriteLine(num);
        int a = 5;
        Console.WriteLine(a);
        char c = 'Z';
        Console.WriteLine(c);
        
        //배열 선언
        int[] numbers;
        numbers = new int[5];
        for (int i = 0; i < 5; i++)
        {
            numbers[i] = i;
            Console.WriteLine(numbers[i]);
        }

        Phone my_phone = new Phone(); //정의한 Phone() 클래스를 사용하려면, main()함수 안에서 객체(인스턴스)를 생성해야함
        my_phone.Call("010-1212-3434"); //클래스 내부 속성 설정 가능
        my_phone.Text("010-3456-7980", "Hi :)");
    }
    
    //클래스는 데이터와 동작을 캡슐화함
    //캡슐화: 데이터와 동작을 단일 단위로 결합하는 프로세스로, 클래스는 속성을 활용해 데이터에 액세스, 메서드를 사용해 동작을 활성화함
    //C#코드의 클래스 정의
    public class Phone
    {
        public string? Brand { get; set; }
        public string? Model { get; set; }
        public int Year { get; set; }

        public void Call(string phone_number)
        {
            Console.WriteLine($"Calling {phone_number}...");
        }

        public void Text(string phone_number, string message)
        {
            Console.WriteLine($"Texting {phone_number}: {message}...");
        }
    }
}
